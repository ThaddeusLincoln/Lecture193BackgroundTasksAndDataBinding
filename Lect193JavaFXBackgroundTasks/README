NOTE : it's not good practice to tie a task to the UI, because if we ever 
change the UI then we'd also have to change the task. So in general the UI
code and the code that processes data should be kept separate. For instance
there's a better way to update a listview rather than with Platform.run,
we can use what's called DATA-BINDING. The TASK class has a property called
value which is the value returned by the task. In our example would be the 
observable list of strings. The listview control has a property called
items and that contains the items that the listview is displaying. What 
we're going to do is bind the items property in the in the tasks value 
property. So whatever or whenever the value property changes the items 
property will update accordingly. So we no longer have to explicitly update
the listview by calling Platform.runlater.

This way we will be performing a long-running task on the background thread
and updating the task on the UI thread. Better yet, the task doesn't know
anything about the UI, all it's doing is returning a list of names and it
doesn't actually care what happens to it after that (it could be written to
a file, display it on the screen, printed to the console, or used for something
else, it actually doesn't matter to the task code and it's not tied  to the UI).

We can do more things with Task, such as passing parameters to it and executing 
code when they completed. 



// ============== DATA BINDING (Lecture 194) =================================

When we're retrieving information from a data base, or a lot of information in 
a background task the UI remains available to the user but nothing happens,
therefore the user might get anxious. In those cases it might be useful to use
a progress bar. 

SERVICE (class) : we can use it to execute a task on a background thread,
so its purpose is to help developers in using background threads correctly
in a UI application. We can start and cancel a SERVICE and unlike a thread
we can also restart a SERVICE.  


// ============= SERVICE (Lecture 195) ========================================

We can restart a SERVICE as many times as we want, but it must actually be a
"ready" state when we start it. When a service is running and completed its
task it's in the "succeeded" state. 

The SERVICE class has got methods that allow us to run code every time the
state of the service changes so what we could do is hide the progress bar
and the label when the application is initialized, then perhaps when the
server state changes to "running" we can show them, and when it changes
to succeeded we will hide them again. 

NOTE : whenever we're tying 2 things together, but we also want that when
change one other the things the other thing also changes, in those cases 
we should always check the documentation to see if we can accomplish 
what we want to do, by biding properties together, rather than using code. 
Which will imply a that our code will be cleaner, and we'll have to use
less of it. 

Also if we want to pass parameters to the task that the service runs 
we have to expose those parameters as properties of the SERVICE subclass.
Now, since properties are a general Java topic 


